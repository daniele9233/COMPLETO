üöÄ Progetto Ansible Kubernetes con RKE2 e Rancher
üìã Sommario
üîç Scopo del progetto (alto livello)

üóÇÔ∏è Inventario & variabili globali (group_vars)

üîÑ Flusso di esecuzione (playbook principali) + diagramma Mermaid

üõ†Ô∏è Ruoli ‚Äî descrizione dettagliata

üìù Task critici per ruoli principali (condizioni ed effetti)

üîó Dipendenze tra ruoli (meta / osservazioni)

üè∑Ô∏è Mappatura tag ‚Üí ruoli / task principali

üîå Integrazioni esterne

üõ°Ô∏è Esecuzione sicura: comandi di esempio e checklist pre-run

‚ö†Ô∏è Note su file mancanti o in revisione

üîç 1. Scopo del progetto (alto livello)
Questo repository automatizza l‚Äôinstallazione e configurazione di un'infrastruttura Kubernetes basata su RKE2 + Rancher.
Il flusso copre:

Build cluster Kubernetes con RKE2 e Rancher API

Configurazione NFS (server, client, provisioner)

Installazione Rancher tramite Helm con certificati TLS

Deploy di servizi in-cluster (pgAdmin, Prometheus/Grafana)

Setup reverse-proxy Nginx per esposizione servizi

üóÇÔ∏è 2. Inventario & variabili globali
Inventory: inventory.ini con gruppi: masters, new_managers, workers, nfs_server, nginx_servers, local.

Variabili globali: group_vars/all.yml contiene rancher_domain, bootstrap_password, versioni Helm/Rancher, parametri LVM, certificati, configurazioni NFS, storage class, e monitoring.

üîÑ 3. Flusso di esecuzione (playbook principali)
text
flowchart TD
    A[create_disk] --> B[update_hosts_file]
    B --> C[master1_install & master1_config & master1_kubectl & master1_helm_cert_manager_install]
    C --> D[master1_create_cluster]
    D --> E[kubectl_setup]
    E --> F[nfs_server & nfs_client_setup]
    F --> G[nfs_provisioner]
    G --> H[install_pgadmin & install_prometheus]
    H --> I[nginx_install]
Sequenza principale:

create_disk su tutti i nodi: prepara LVM/mount.

update_hosts_file: aggiorna /etc/hosts.

Master tasks: installazione configurazione RKE2, Helm, Rancher.

Creazione cluster via Rancher API, join nodi.

Setup kubectl su nuovi manager.

Configurazione NFS server/client/provisioner.

Deploy applicazioni in cluster (pgAdmin, Prometheus).

Configurazione proxy Nginx per accesso esterno.

üõ†Ô∏è 4. Ruoli ‚Äî descrizione e funzionalit√†
Ruolo	Descrizione sintetica
create_disk	Cerca disco libero, crea LVM, monta, aggiorna /etc/fstab
update_hosts_file	Aggiorna il file /etc/hosts rimuovendo entry vecchie
master1_install	Installa e avvia RKE2 sul master
master1_config	Configura TLS SAN per RKE2
master1_kubectl	Copia kubectl e config per uso locale
master1_helm_cert_manager_install	Installa Helm, crea segreti TLS, installa Rancher con Helm
master1_create_cluster	Crea cluster Rancher via API e fa join ai nodi
kubectl_setup	Patch kubectl su nuovi manager, fix DNS
nfs (server)	Installa e configura server NFS in base a OS
nfs_client_setup	Installa client NFS e verifica reachability
nfs_provisioner	Deploya provisioner NFS Helm in cluster
install_prometheus	Installa kube-prometheus-stack tramite Helm
install_pgadmin	Deploy pgAdmin con PVC
nginx_install	Installa e configura reverse-proxy Nginx e certificati TLS
üìù 5. Task dettagliati (esempi)
create_disk:

Cerca un disco non root senza partizioni/mount.

Se trovato, crea partizione, PV, VG, LV, formatta (fs_type da variabili).

Aggiorna /etc/fstab con UUID e monta.

Skip se disco non rilevato (safe).

master1_create_cluster:

Login Rancher API e crea cluster provisioning.

Ottiene token registrazione e lancia join su nodi manager/worker.

Gestisce polling per readiness.

Richiede Rancher pronto e certificati funzionanti.

nfs:

Adatta task in base a OS family (Debian/RedHat).

Installa pacchetti, configura exports, gestisce permessi.

Verifica IP client NFS corretti.

nfs_provisioner:

Verifica kubeconfig, installa Helm se serve.

Crea values file con server/path NFS.

Installa/aggiorna provisioner in namespace.

Crea StorageClass per dynamic provisioning.

üîó 6. Dipendenze tra ruoli
Al momento non presenti file meta/main.yml con dipendenze esplicite.
Ordine e dipendenze implicite gestite da site.yml.
Raccomandazione: aggiungere meta dipendenze per chiarezza, es. install_pgadmin dipende da kubectl_setup.

üè∑Ô∏è 7. Mappatura tag ‚Üí ruoli / task
Non sono stati usati tag per esecuzioni selettive.
Suggerimento:

Aggiungere tag strutturati come:
create_disk, rancher_install, nfs, monitoring, pgadmin.

Posso fornire lista tag consigliati e applicare patch per l‚Äôimplementazione.

üîå 8. Integrazioni esterne
Rancher API (v3/v1 provisioning) per cluster creation e token.

Helm repositories:

rancher-stable

prometheus-community (https://prometheus-community.github.io/helm-charts)

NFS: server + client + provisioner NFS dinamico.

Certificati TLS (fullchain.pem, privkey.pem, cacerts.pem) gestiti localmente.

APT/YUM/DNF/Zypper: gestione pacchetti con retry per repo instabili.

üõ°Ô∏è 9. Esecuzione sicura: comandi e checklist
Verifiche prima di eseguire:

Controllare variabili di Rancher e versioni compatibili con RKE2

bash
curl -s https://api.github.com/repos/rancher/rancher/releases | jq -r '.[] | select(.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")) | .tag_name' | head -5
curl -s https://api.github.com/repos/rancher/rke2/releases | jq -r '.[].tag_name' | grep -v rc | head -10
Inserire certificati in:
/roles/master1_helm_cert_manager_install/files
con nomi: cacerts.pem, fullchain.pem, privkey.pem

Comandi di esempio:

Controllo modifiche (dry-run con diff):
ansible-playbook -i inventory.ini site.yml --check --diff

Controllo sintassi Ansible:
ansible-playbook -i inventory.ini site.yml --syntax-check

Installazione completa:
ansible-playbook -i inventory.ini site.yml
